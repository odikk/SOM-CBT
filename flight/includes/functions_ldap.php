<?php/***************************************************************************    functions_ldap.php *                            ------------------- *   begin                : Thursday, May 1, 2003 *   copyright            : (C)2003 Piotr Kuczyñski *   email                : pkuczynski@hypode.net *   package              : LDAP Auth MOD *   version              : 1.1.8 * ***************************************************************************//*************************************************************************** *   Updated              : Monday, March 15, 2004 *   copyright            : (C)2004 Adam Larsen *   email                : Adam@ACSoft.net *   package              : LDAP Auth MOD ***************************************************************************//*************************************************************************** * *   This program is free software; you can redistribute it and/or modify *   it under the terms of the GNU General Public License as published by *   the Free Software Foundation; either version 2 of the License, or *   (at your option) any later version. * ***************************************************************************/define('LDAP_AUTH_OK', 1);define('LDAP_INVALID_USERNAME', 2);define('LDAP_INVALID_PASSWORD', 4);define('ALLOW_BASIC_AUTH', true);define('User_Type_Both',0);define('User_Type_phpBB',1);define('User_Type_LDAP',2);// ----------------------------------------------------// ldap_auth()//// Authenticate user using LDAP directory// ----------------------------------------------------function ldap_auth ($username, $password) {	global $db, $CBT_config;if ($username == "" || ($password == "" && !ntlm_check()))  {  die("No Username and/or Password.  Can't authenticate"); }	// turn off reporting errors in case the password will be incorrect during binding	$reporting = error_reporting( E_ERROR | E_PARSE | E_CORE_ERROR | E_COMPILE_ERROR | E_USER_ERROR );	$connection = ldap_connect_ex();	if ($connection == false) {      die('Could not connect to LDAP directory.');   	}   	else {		if ($CBT_config["ldap_proxy_dn"] != "") { // proxy binding			$bind = ldap_bind($connection, $CBT_config["ldap_proxy_dn"], $CBT_config["ldap_proxy_dn_pass"]);		}		else { // anonymous binding			$bind = ldap_bind($connection);		}		if ($bind == false) {			die('Could not bind to LDAP directory.');		}		else { // successful binding			$query = ldap_search($connection, $CBT_config["ldap_dn"], $CBT_config['ldap_uid'].'='. $username);			if ($query == false) {				die('Could not perform query to LDAP directory. User Name: ' . $CBT_config['ldap_uid'] . '=' . $username );			}			else {				$query_result = ldap_get_entries($connection, $query);				if ($query_result["count"] != 1) {					$result = LDAP_INVALID_USERNAME;				}				else {					$userdn = $query_result[0]["dn"];										$sql = "UPDATE ".USERS_TABLE . " SET user_password = '" .md5($password). "' WHERE username = '".$username."'";					$db->sql_query($sql);										if (ntlm_check()){						//Logon using NTLM						$result = LDAP_AUTH_OK;					}					else					{						ldap_close($connection);						// bind using user's DN and given $password to check if the password is correct						$connection = ldap_connect_ex();						$bind = ldap_bind($connection, $userdn, $password);						if ($bind == false or $password=='') {							$result = LDAP_INVALID_PASSWORD;						}						else {							$result = LDAP_AUTH_OK;						}					}				}			}		}	}	ldap_close($connection);	error_reporting($reporting);	return $result;}// ----------------------------------------------------// ldap_connect_ex()//// Connects to LDAP on specifing port, if it was configured// using Authentication Settings in Control Panel// ----------------------------------------------------function ldap_connect_ex() {	global $CBT_config;	$connection  = ldap_connect($CBT_config['ldap_host'], $CBT_config['ldap_port']);	ldap_set_option($connection, LDAP_OPT_PROTOCOL_VERSION, 3);	return $connection;}// ----------------------------------------------------// add_ldap_user()//// Adds new user to mysq database, based on the info// found in LDAP directory.// ----------------------------------------------------function add_ldap_user ($username) {	global $db, $CBT_config;	// reading user informations from ldap	$connection = ldap_connect_ex();	if ($CBT_config["ldap_proxy_dn"] != "") {		$bind = ldap_bind($connection, $CBT_config["ldap_proxy_dn"], $CBT_config["ldap_proxy_dn_pass"]);	}	else {		$bind = ldap_bind($connection);	}   	$query = ldap_search($connection, $CBT_config["ldap_dn"], $CBT_config['ldap_uid'].'='.$username);	$query_result = ldap_get_entries($connection, $query);	$name = explode(" ", $query_result[0]['cn'][0]); // get the split the name into first & last name	ldap_close($connection);		$sql = "INSERT INTO ".USERS_TABLE." (username, user_password, user_fname, user_lname, user_group) VALUES ("				. "'" . str_replace("\'", "''", $username) . "', "		// username				. "'', "												// user_password empty which will be updated when he logins in next time				."'".$name[0]."', "										// user first name				."'".$name[1]."', "										// user last name				."3 )";													//added to others group	$db->sql_query($sql);}function ntlm_check () {	global $CBT_config;	if (isset($_SERVER['AUTH_TYPE']) && (($_SERVER['AUTH_TYPE'] == 'Basic' && ALLOW_BASIC_AUTH) || $_SERVER['AUTH_TYPE'] == 'NTLM' || $_SERVER['AUTH_TYPE'] == 'Negotiate') && $CBT_config['auth_mode'] == 'ldap')		return true;	else		return false;}function ntlm_get_user() {	if (ntlm_check())	{		$ntlm_user = $_SERVER['REMOTE_USER'];		$strloc = strpos($ntlm_user,"\\");		$strloc++;		if (substr($ntlm_user, $strloc, 1) == "\\" )			$strloc++;		if ($strloc > 2)			$username = substr($ntlm_user,$strloc);		else			$username = $ntlm_user;		return $username;	}	else		return false;}?>